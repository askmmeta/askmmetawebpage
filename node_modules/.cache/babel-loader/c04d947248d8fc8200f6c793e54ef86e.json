{"ast":null,"code":"import e from \"../lib/LdrsBaseElement.js\";\nvar t = \":host{align-items:center;display:inline-flex;flex-shrink:0;height:var(--uib-size);justify-content:center;width:var(--uib-size)}:host([hidden]){display:none}.container{--mask-size:calc(var(--uib-size)/2 - var(--uib-stroke));align-items:center;animation:spin calc(var(--uib-speed)) linear infinite;background-image:conic-gradient(transparent 25%,var(--uib-color));border-radius:50%;display:flex;height:var(--uib-size);justify-content:flex-start;-webkit-mask:radial-gradient(circle var(--mask-size),transparent 99%,#000 100%);mask:radial-gradient(circle var(--mask-size),transparent 99%,#000 100%);position:relative;width:var(--uib-size)}@keyframes spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}\";\n\nclass s extends e {\n  _attributes = [\"size\", \"color\", \"speed\", \"stroke\"];\n  size;\n  color;\n  speed;\n  stroke;\n\n  static get observedAttributes() {\n    return [\"size\", \"color\", \"speed\", \"stroke\"];\n  }\n\n  constructor() {\n    super(), this.storePropsToUpgrade(this._attributes), this.reflect(this._attributes);\n  }\n\n  connectedCallback() {\n    this.upgradeStoredProps(), this.applyDefaultProps({\n      size: 40,\n      color: \"black\",\n      speed: .9,\n      stroke: 5\n    }), this.template.innerHTML = `\\n      <div class=\"container\"></div>\\n      <style>\\n        :host{\\n          --uib-size: ${this.size}px;\\n          --uib-color: ${this.color};\\n          --uib-speed: ${this.speed}s;\\n          --uib-stroke: ${this.stroke}px;\\n        }\\n        ${t}\\n      </style>\\n    `, this.shadow.replaceChildren(this.template.content.cloneNode(!0));\n  }\n\n  attributeChangedCallback() {\n    const e = this.shadow.querySelector(\"style\");\n    e && (e.innerHTML = `\\n      :host{\\n        --uib-size: ${this.size}px;\\n        --uib-color: ${this.color};\\n        --uib-speed: ${this.speed}s;\\n        --uib-stroke: ${this.stroke}px;\\n      }\\n      ${t}\\n    `);\n  }\n\n}\n\nvar i = {\n  register: function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"l-tailspin\";\n    customElements.get(e) || customElements.define(e, class extends s {});\n  },\n  element: s\n};\nexport { i as default };","map":{"version":3,"mappings":";;;AAEA,MAAMA,CAAN,SAAuBC,CAAvB,CAAuBA;EACnBC,cAAc,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,QAA3B,CAAdA;EACAC;EACAC;EACAC;EACAC;;EACWC;IACP,OAAO,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,QAA3B,CAAP;EAEJC;;EAAAA;IACIC,SACAC,KAAKC,mBAALD,CAAyBA,KAAKR,WAA9BQ,CADAD,EAEAC,KAAKE,OAALF,CAAaA,KAAKR,WAAlBQ,CAFAD;EAIJI;;EAAAA;IACIH,KAAKI,kBAALJ,IACAA,KAAKK,iBAALL,CAAuB;MACnBP,MAAM,EADa;MAEnBC,OAAO,OAFY;MAGnBC,OAAO,EAHY;MAInBC,QAAQ;IAJW,CAAvBI,CADAA,EAOAA,KAAKM,QAALN,CAAcO,SAAdP,GAA0B,+FAIVA,KAAKP,mCACJO,KAAKN,kCACLM,KAAKL,oCACJK,KAAKJ,iCAErBY,yBAhBFR,EAmBAA,KAAKS,MAALT,CAAYU,eAAZV,CAA4BA,KAAKM,QAALN,CAAcW,OAAdX,CAAsBY,SAAtBZ,CAAsBY,CAAU,CAAhCZ,CAA5BA,CAnBAA;EAqBJa;;EAAAA;IACI,MAAMC,IAAUd,KAAKS,MAALT,CAAYe,aAAZf,CAA0B,OAA1BA,CAAhB;IACKc,MAELA,EAAQP,SAARO,GAAoB,uCAENd,KAAKP,iCACJO,KAAKN,gCACLM,KAAKL,kCACJK,KAAKJ,6BAErBY,SATKM;EAWR;;AAjDkBvB;;AAmDvB,IAAeyB;EACXC,UAAU,YAAQ;IAAA,IAAPC,CAAO;IACTC,eAAeC,GAAfD,CAAmBD,CAAnBC,KACDA,eAAeE,MAAfF,CAAsBD,CAAtBC,EAA4B,cAAc7B,CAAd,CAAcA,EAA1C6B,CADCA;EAGJ,CALM;EAOXG,SAAShC;AAPE,CAAf;AAOaA","names":["Tailspin","Base","_attributes","size","color","speed","stroke","observedAttributes","constructor","super","this","storePropsToUpgrade","reflect","connectedCallback","upgradeStoredProps","applyDefaultProps","template","innerHTML","styles","shadow","replaceChildren","content","cloneNode","attributeChangedCallback","styleEl","querySelector","tailspin","register","name","customElements","get","define","element"],"sources":["C:\\Users\\Omkar\\OneDrive\\Desktop\\a\\askmmeta\\node_modules\\ldrs\\temp-ts-out\\elements\\tailspin.js"],"sourcesContent":["import Base from '../lib/LdrsBaseElement.js';\nimport styles from './tailspin.scss';\nclass Tailspin extends Base {\n    _attributes = ['size', 'color', 'speed', 'stroke'];\n    size;\n    color;\n    speed;\n    stroke;\n    static get observedAttributes() {\n        return ['size', 'color', 'speed', 'stroke'];\n    }\n    constructor() {\n        super();\n        this.storePropsToUpgrade(this._attributes);\n        this.reflect(this._attributes);\n    }\n    connectedCallback() {\n        this.upgradeStoredProps();\n        this.applyDefaultProps({\n            size: 40,\n            color: 'black',\n            speed: 0.9,\n            stroke: 5,\n        });\n        this.template.innerHTML = `\n      <div class=\"container\"></div>\n      <style>\n        :host{\n          --uib-size: ${this.size}px;\n          --uib-color: ${this.color};\n          --uib-speed: ${this.speed}s;\n          --uib-stroke: ${this.stroke}px;\n        }\n        ${styles}\n      </style>\n    `;\n        this.shadow.replaceChildren(this.template.content.cloneNode(true));\n    }\n    attributeChangedCallback() {\n        const styleEl = this.shadow.querySelector('style');\n        if (!styleEl)\n            return;\n        styleEl.innerHTML = `\n      :host{\n        --uib-size: ${this.size}px;\n        --uib-color: ${this.color};\n        --uib-speed: ${this.speed}s;\n        --uib-stroke: ${this.stroke}px;\n      }\n      ${styles}\n    `;\n    }\n}\nexport default {\n    register: (name = 'l-tailspin') => {\n        if (!customElements.get(name)) {\n            customElements.define(name, class extends Tailspin {\n            });\n        }\n    },\n    element: Tailspin,\n};\n"]},"metadata":{},"sourceType":"module"}